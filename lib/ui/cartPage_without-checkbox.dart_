import 'dart:convert';
import 'dart:developer';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'checkoutPage.dart';

class CartPage extends StatefulWidget {
  @override
  State<CartPage> createState() => _CartPageState();
}

class _CartPageState extends State<CartPage> {
  List<Map<String, dynamic>> cartItems = [];
  double totalPrice = 0.0;

  @override
  void initState() {
    super.initState();
    loadCartItems();
  }

  Future<void> loadCartItems() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String> cart = prefs.getStringList('cart') ?? [];

    setState(() {
      cartItems = cart.map((item) => jsonDecode(item) as Map<String, dynamic>).toList();
      calculateTotalPrice();
    });
  }

  Future<void> saveCartItems() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String> cart = cartItems.map((item) => jsonEncode(item)).toList();
    await prefs.setStringList('cart', cart);
    calculateTotalPrice();
  }

  void calculateTotalPrice() {
    setState(() {
      totalPrice = 0.0;
      for (var item in cartItems) {
        double price = double.tryParse(item['price'].toString()) ?? 0.0;
        int qty = item['qty'] ?? 1;
        totalPrice += price * qty;
        //totalPrice = totalPrice+(price*qty)
      }
    });
  }

  Future<void> removeCartItem(int index) async {
    setState(() {
      cartItems.removeAt(index);
      calculateTotalPrice();
    });
    await saveCartItems();
  }

  Future<void> clearCart() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.remove('cart');
    setState(() {
      cartItems.clear();
      totalPrice = 0.0;
    });
  }

  void checkout() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Checkout'),
        content: const Text('Proceed to Checkout?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => CheckoutPage()),
              );
            },
            child: const Text('Proceed'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Cart Page"),
        actions: [
          IconButton(
            icon: const Icon(Icons.delete),
            onPressed: clearCart,
          ),
        ],
      ),
      body: Column(
        children: [
          /*Expanded(
            child: cartItems.isEmpty
                ? const Center(child: Text('Your cart is empty.'))
                : SingleChildScrollView(
              scrollDirection: Axis.horizontal,
              child: DataTable(
                border: TableBorder.all(
                  width: 1,
                  color: Colors.grey.shade300

                ),
                columnSpacing: 20,

                columns:  [
                  DataColumn(
                    label: Container(
                      height:200,
                        decoration: BoxDecoration(
                          color: Colors.grey.shade200,

                        ),
                      child: Center(child: Text('Image'))),

                  ),
                  DataColumn(label: Text('Product')),
                  DataColumn(label: Text('Price')),
                  DataColumn(label: Text('Remove')),
                ],

                rows: cartItems.map((item) {
                  return DataRow(
                    cells: [
                      DataCell(
                        Padding(
                          padding: const EdgeInsets.all(5.0),
                          child: Image.network(
                            item['image'],
                            height: 50,
                            fit: BoxFit.cover,
                          ),
                        ),
                      ),
                      DataCell(Text(item['name'])),
                      DataCell(Text('Rs.${item['price']}')),
                      DataCell(
                        IconButton(
                          icon: const Icon(Icons.delete, color: Colors.red),
                          onPressed: () {
                            int index = cartItems.indexOf(item);
                            removeCartItem(index);
                          },
                        ),
                      ),
                    ],
                  );
                }).toList(),
              ),
            ),
          ),*/
          Expanded(
            child: cartItems.isEmpty
                ? const Center(child: Text('Your cart is empty.'))
                : ListView.builder(
              itemCount: cartItems.length,
              itemBuilder: (context, index) {
                final item = cartItems[index];
                log(item.toString());
                return Card(
                  margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                  child: ListTile(
                    leading: Image.network(
                      item['image'],
                      width: 50,
                      height: 50,
                      fit: BoxFit.cover,
                    ),
                    title: Text(item['name']),
                    subtitle: Text('Rs.${item['price']} x ${item['qty']}'),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        IconButton(
                          icon: Icon(Icons.remove),
                          onPressed: () async {
                            if (item['qty'] > 1) {
                              setState(() {
                                item['qty'] -= 1;
                              });
                            } else {
                              setState(() {
                                cartItems.removeAt(index);
                              });
                            }
                            await saveCartItems();
                          },
                        ),
                        Text('${item['qty']}'),
                        IconButton(
                          icon: Icon(Icons.add),
                          onPressed: () async {
                            setState(() {
                              item['qty'] += 1;
                            });
                            await saveCartItems();
                          },
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),
          if (cartItems.isNotEmpty)
            Container(
              padding: const EdgeInsets.all(16.0),
              decoration: BoxDecoration(
                color: Colors.white,
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withOpacity(0.5),
                    spreadRadius: 2,
                    blurRadius: 5,
                    offset: const Offset(0, 3),
                  ),
                ],
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    'Total: Rs.${totalPrice.toStringAsFixed(2)}',
                    style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  ElevatedButton(
                    onPressed: checkout,
                    child: const Text('Checkout'),
                  ),
                ],
              ),
            ),
        ],
      ),
    );
  }
}